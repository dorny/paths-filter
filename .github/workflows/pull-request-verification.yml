name: "Pull Request Verification"
on:
  pull_request:
    paths-ignore: [ '*.md' ]
    branches:
      - master
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        npm install
        npm run all

  test-inline:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ./
      id: filter
      with:
        filters: |
          error:
            - not_existing_path/**/*
          any:
            - "**/*"
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1
    - name: changes-test
      if: contains(fromJSON(steps.filter.outputs.changes), 'error') || !contains(fromJSON(steps.filter.outputs.changes), 'any')
      run: exit 1

  test-external:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ./
      id: filter
      with:
        filters: '.github/filters.yml'
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1

  test-without-token:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ./
      id: filter
      with:
        token: ''
        filters: '.github/filters.yml'
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1

  test-wd-without-token:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: somewhere
    - uses: ./somewhere
      id: filter
      with:
        token: ''
        working-directory: somewhere
        filters: '.github/filters.yml'
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1

  test-local-changes:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: echo "NEW FILE" > local
    - run: git add local
    - uses: ./
      id: filter
      with:
        base: HEAD
        filters: |
          local:
            - local
    - name: filter-test
      if: steps.filter.outputs.local != 'true'
      run: exit 1
    - name: count-test
      if: steps.filter.outputs.local_count != 1
      run: exit 1

  test-change-type:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: configure GIT user
      run: git config user.email "john@nowhere.local" && git config user.name "John Doe"
    - name: modify working tree
      run: touch add.txt && rm README.md && echo "TEST" > LICENSE
    - name: commit changes
      run: git add -A && git commit -a -m 'testing this action'
    - uses: ./
      id: filter
      with:
        token: ''
        list-files: shell
        filters: |
          added:
            - added: "add.txt"
          deleted:
            - deleted: "README.md"
          modified:
            - modified: "LICENSE"
          any:
            - added|deleted|modified: "*"
    - name: Print 'added_files'
      run: echo ${{steps.filter.outputs.added_files}}
    - name: Print 'modified_files'
      run: echo ${{steps.filter.outputs.modified_files}}
    - name: Print 'deleted_files'
      run: echo ${{steps.filter.outputs.deleted_files}}
    - name: filter-test
      if: |
        steps.filter.outputs.added != 'true'
        || steps.filter.outputs.deleted != 'true'
        || steps.filter.outputs.modified != 'true'
        || steps.filter.outputs.any != 'true'
        || steps.filter.outputs.added_files != 'add.txt'
        || steps.filter.outputs.modified_files != 'LICENSE'
        || steps.filter.outputs.deleted_files != 'README.md'
      run: exit 1

  test-baseref-changes:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ./
      id: filter
      with:
        base: ${{ github.base_ref }}
        ref: ${{ github.sha }}
        filters: |
          error:
            - not_existing_path/**/*
          any:
            - "**/*"
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1
    - name: changes-test
      if: contains(fromJSON(steps.filter.outputs.changes), 'error') || !contains(fromJSON(steps.filter.outputs.changes), 'any')
      run: exit 1

  test-custom-nostatus:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - run: |
        base=${{ github.base_ref }}
        compare=${{ github.sha }}
        git fetch origin $base:$base
        echo 'customchanges<<EOF' >> $GITHUB_ENV
        git diff --name-only $base..$compare >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    - uses: ./
      id: filter
      with:
        files: ${{ env.customchanges }}
        filters: |
          error:
            - not_existing_path/**/*
          any:
            - "**/*"
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1
    - name: changes-test
      if: contains(fromJSON(steps.filter.outputs.changes), 'error') || !contains(fromJSON(steps.filter.outputs.changes), 'any')
      run: exit 1
  
  test-custom-withstatus:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - run: |
        base=${{ github.base_ref }}
        compare=${{ github.sha }}
        git fetch origin $base:$base
        echo 'customchanges<<EOF' >> $GITHUB_ENV
        git diff --name-status $base..$compare >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    - uses: ./
      id: filter
      with:
        files: ${{ env.customchanges }}
        filters: |
          error:
            - not_existing_path/**/*
          any:
            - "**/*"
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1
    - name: changes-test
      if: contains(fromJSON(steps.filter.outputs.changes), 'error') || !contains(fromJSON(steps.filter.outputs.changes), 'any')
      run: exit 1
    - name: print context
      run: |
        echo "${{ tojson(steps.filter) }}"

  test-ignore-changes:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        echo "NEW FILE" > local.ts
        echo "IGNORE FILE" > local.md
    - run: git add local.ts local.md
    - uses: ./
      id: filter
      with:
        base: HEAD
        filters: '.github/filters.yml'
    - name: print context
      run: |
        echo "${{ tojson(steps.filter) }}"
    - name: filter-test
      if: steps.filter.outputs.any != 'true'
      run: exit 1
    - name: ignore-test
      if: steps.filter.outputs.anyignore_count != 1
      run: exit 1
    - name: ignore_testnull
      if: steps.filter.outputs.anyignorenull == true
      run: exit 1
    - name: ignore_testall
      if: steps.filter.outputs.anyignoreall_count != 2
      run: |
        exit 1

  test-global-ignore:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        echo "NEW FILE" > local.ts
        echo "IGNORE FILE" > local.md
    - run: git add local.ts local.md
    - uses: ./
      id: filter
      with:
        base: HEAD
        filters: |
          error:
            - not_existing_path/**/*
          any:
            - "**/*"
          anyignore:
            - 
              paths: "**/*"
              paths_ignore:
                - "**local.md"
        global-ignore: .github/filterignore
    - name: print context
      run: |
        echo "${{ tojson(steps.filter) }}"
    - name: filter-test
      if: steps.filter.outputs.any_count != 1
      run: exit 1
    - name: ignore-test
      if: steps.filter.outputs.anyignore == true
      run: exit 1
    - name: ignore_testnull
      if: steps.filter.outputs.error == true
      run: exit 1